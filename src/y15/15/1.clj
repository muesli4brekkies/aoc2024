(ns
 y15.15.1)

(defn
  solve
  [in]
  (reduce
   (fn
     [ac
      [a
       b
       c
       d]]
     (max
      ac
      (reduce
       (fn
         [ac
          [e
           f
           g
           h]]
         (let
          [m
           (+
            (*
             a
             e)
            (*
             b
             f)
            (*
             c
             g)
            (*
             d
             h))]
           (*
            ac
            (max
             m
             0))))
       1
       (apply
        map
        vector
        (map
         (fn
           [i]
           (drop-last
            i))
         (partition
          5
          (map
           (fn
             [n]
             (Integer/parseInt
              n))
           (re-seq
            #"-?\d+"
            in))))))))
   0
   (loop
    [i
     1
     res
     []]
     (if
      (=
       i
       100)
       res
       (recur
        (inc
         i)
        (into
         res
         (loop
          [j
           1
           res
           []]
           (if
            (<
             100
             (+
              i
              j))
             res
             (recur
              (inc
               j)
              (into
               res
               (loop
                [k
                 1
                 res
                 []]
                 (if
                  (<
                   100
                   (+
                    i
                    j
                    k))
                   res
                   (recur
                    (inc
                     k)
                    (conj
                     res
                     [i
                      j
                      k
                      (-
                       100
                       (+
                        i
                        j
                        k))]))))))))))))))